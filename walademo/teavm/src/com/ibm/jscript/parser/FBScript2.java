/* Generated By:JavaCC: Do not edit this line. FBScript2.java */
package com.ibm.jscript.parser;

import com.ibm.jscript.ParserResult;
import com.ibm.jscript.ScriptError;
import com.ibm.jscript.ASTTree.ASTArgumentList;
import com.ibm.jscript.ASTTree.ASTArrayLiteral;
import com.ibm.jscript.ASTTree.ASTArrayMember;
import com.ibm.jscript.ASTTree.ASTAssign;
import com.ibm.jscript.ASTTree.ASTBlock;
import com.ibm.jscript.ASTTree.ASTBreak;
import com.ibm.jscript.ASTTree.ASTCall;
import com.ibm.jscript.ASTTree.ASTCase;
import com.ibm.jscript.ASTTree.ASTContinue;
import com.ibm.jscript.ASTTree.ASTDebug;
import com.ibm.jscript.ASTTree.ASTDoWhile;
import com.ibm.jscript.ASTTree.ASTExpression;
import com.ibm.jscript.ASTTree.ASTFor;
import com.ibm.jscript.ASTTree.ASTForIn;
import com.ibm.jscript.ASTTree.ASTFunction;
import com.ibm.jscript.ASTTree.ASTIdentifier;
import com.ibm.jscript.ASTTree.ASTIf;
import com.ibm.jscript.ASTTree.ASTImport;
import com.ibm.jscript.ASTTree.ASTLiteral;
import com.ibm.jscript.ASTTree.ASTMember;
import com.ibm.jscript.ASTTree.ASTNew;
import com.ibm.jscript.ASTTree.ASTNode;
import com.ibm.jscript.ASTTree.ASTObjectLiteral;
import com.ibm.jscript.ASTTree.ASTProfile;
import com.ibm.jscript.ASTTree.ASTProgram;
import com.ibm.jscript.ASTTree.ASTRegExp;
import com.ibm.jscript.ASTTree.ASTReturn;
import com.ibm.jscript.ASTTree.ASTSwitch;
import com.ibm.jscript.ASTTree.ASTSync;
import com.ibm.jscript.ASTTree.ASTTernaryOp;
import com.ibm.jscript.ASTTree.ASTThis;
import com.ibm.jscript.ASTTree.ASTThrow;
import com.ibm.jscript.ASTTree.ASTTry;
import com.ibm.jscript.ASTTree.ASTUnaryOp;
import com.ibm.jscript.ASTTree.ASTVariableDecl;
import com.ibm.jscript.ASTTree.ASTWhile;
import com.ibm.jscript.ASTTree.ASTWith;
import com.ibm.jscript.ASTTree.ILabelledStatement;
import com.ibm.jscript.ASTTree.NodeVector;
import com.ibm.jscript.ASTTree.binaryop.ASTBinaryAdd;
import com.ibm.jscript.ASTTree.binaryop.ASTBinaryDefaultOp;
import com.ibm.jscript.ASTTree.binaryop.ASTBinaryRelAnd;
import com.ibm.jscript.ASTTree.binaryop.ASTBinaryRelOr;
import com.ibm.jscript.std.FunctionObject;

/**
 *
 *
 *
 * PS All  in this file are in conformance with ECMAScript Language Specification Edition 3 24-Mar-00
 *    except for "catch" "finally" which became "catchProduction" and "finallyProduction", and for all ones
 *    beginning with underscore "_" .
 *    Also note , that this grammar is of type LL while the original specification is written with a grammar ot type LR
 *    this will induce modifications in the logic and/or in the s.
 */
public class FBScript2 implements FBScript2Constants {

  public static void main(String[] args) {
     FBScript2 parser;
    if (args.length == 0) {
      System.out.println("Java Parser:  Reading from standard input . . .");
      parser = new FBScript2(new java.io.InputStreamReader(System.in));
    } else if (args.length == 1) {
      System.out.println("Java Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new FBScript2(new java.io.InputStreamReader(new java.io.FileInputStream(args[0])));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Java Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Java Parser:  Usage is one of:");
      System.out.println("         java JavaParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JavaParser inputfile");
      return;
    }
    try {
      parser.program();
      System.out.println("Java Parser:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Java Parser:  Encountered errors during parse.");
    }
  }

  // Placeholder for error recovery
  public ParserResult parsedScript = null;

  final public ASTNode nullLiteral() throws ParseException {
     ASTLiteral literal= new ASTLiteral();
    jj_consume_token(NULL);
                literal.setNullValue();{if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode undefinedLiteral() throws ParseException {
     ASTLiteral literal= new ASTLiteral();
    jj_consume_token(UNDEFINED);
                     literal.setUndefinedValue();{if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode booleanLiteral() throws ParseException {
     ASTLiteral literal= new ASTLiteral();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
                  literal.setBooleanValue(true);{if (true) return literal;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                  literal.setBooleanValue(false);{if (true) return literal;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode numericLiteral() throws ParseException {
     Token t;
     ASTLiteral literal= new ASTLiteral();
    t = jj_consume_token(NUMERIC_LITERAL);
         literal.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
         String strV=t.image;
         if (strV.startsWith("0x") || strV.startsWith("0X")){
            literal.setHexValue(strV);
         }
         else
         if (strV.startsWith("0")){
            literal.setOctalValue(strV);
         }
         else{
            literal.setDecimalValue(strV);
         }
         {if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode stringLiteral() throws ParseException {
     ASTLiteral literal= new ASTLiteral();
     Token t;
    t = jj_consume_token(STRING_LITERAL);
            literal.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
            literal.setStringValue(t.image);
            {if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

  final public String stringConstant() throws ParseException {
     Token t;
    t = jj_consume_token(STRING_LITERAL);
            {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode dateLiteral() throws ParseException {
     ASTLiteral literal= new ASTLiteral();
     Token t;
    t = jj_consume_token(DATE_LITERAL);
            literal.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
            literal.setDateValue(t.image);
            {if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode regExpLiteral() throws ParseException {
     Token t; Token t2=null; ASTRegExp literal;
    jj_consume_token(SLASH);
             token_source.SwitchTo(IN_REGEXP);
    t = jj_consume_token(REGEXP_BODY);
    t2 = jj_consume_token(REGEXP_END);
                                                                                 token_source.SwitchTo(DEFAULT);
            String flags = t2.image.length()>1? t2.image.substring(1): null;
            literal= new ASTRegExp(t.image,flags);
            literal.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
            {if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode literal() throws ParseException {
        ASTNode node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      node = nullLiteral();
      break;
    case UNDEFINED:
      node = undefinedLiteral();
      break;
    case FALSE:
    case TRUE:
      node = booleanLiteral();
      break;
    case NUMERIC_LITERAL:
      node = numericLiteral();
      break;
    case STRING_LITERAL:
      node = stringLiteral();
      break;
    case DATE_LITERAL:
      node = dateLiteral();
      break;
    case SLASH:
      node = regExpLiteral();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

//  A.3 Expressions
  final public ASTNode primaryExpression() throws ParseException {
      Token t;
     ASTNode node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
                  {if (true) return new ASTThis();}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                             ASTIdentifier idNode=new ASTIdentifier(t.image);
                            idNode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                            {if (true) return idNode;}
      break;
    case FALSE:
    case NULL:
    case UNDEFINED:
    case TRUE:
    case NUMERIC_LITERAL:
    case STRING_LITERAL:
    case DATE_LITERAL:
    case SLASH:
      node = literal();
                          {if (true) return node;}
      break;
    case LBRACKET:
      node = arrayLiteral();
                               {if (true) return node;}
      break;
    case LBRACE:
      node = objectLiteral();
                                {if (true) return node;}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      node = expression();
      jj_consume_token(RPAREN);
                                     {if (true) return node;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode arrayLiteral() throws ParseException {
     ASTArrayLiteral anode= new ASTArrayLiteral();
     int count=0;
    jj_consume_token(LBRACKET);
    count = elision();
           anode.increaseSizeBy(count);
    elementList(anode);
            // if the elementList(anode) did not add any members to the array
            // => the array is like [,,,,] so we must add an empty member at the end.
            int cnt = anode.getSlotCount();
            if(cnt==count){
                anode.increaseSizeBy(1);
            }
    jj_consume_token(RBRACKET);
            {if (true) return anode;}
    throw new Error("Missing return statement in function");
  }

  final public void elementList(ASTArrayLiteral anode) throws ParseException {
     int count=0;
     ASTNode node;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case FALSE:
      case FUNCTION:
      case NEW:
      case NULL:
      case UNDEFINED:
      case THIS:
      case TRUE:
      case TYPEOF:
      case VOID:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case NUMERIC_LITERAL:
      case STRING_LITERAL:
      case DATE_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case SLASH:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      node = assignmentExpression();
            anode.add(node);
      count = elision();
           anode.increaseSizeBy(count-1);
    }
          if(count>0){// take the last ',' into account
              anode.increaseSizeBy(1);
          }
  }

  final public int elision() throws ParseException {
     int count=0;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
           count++;
    }
            {if (true) return count;}
    throw new Error("Missing return statement in function");
  }

  final public ASTObjectLiteral objectLiteral() throws ParseException {
        ASTObjectLiteral node = new ASTObjectLiteral();
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERIC_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      propertyNameAndValueList(node);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
         {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public void propertyNameAndValueList(ASTObjectLiteral node) throws ParseException {
        ASTLiteral t;
        ASTNode n;
    t = propertyName();
    jj_consume_token(COLON);
    n = assignmentExpression();
          node.add(t, n);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      t = propertyName();
      jj_consume_token(COLON);
      n = assignmentExpression();
            node.add(t, n);
    }
  }

  final public ASTLiteral propertyName() throws ParseException {
     ASTLiteral lnode=null;
     Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                         lnode=new ASTLiteral(); lnode.setStringValue(t.image);lnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);{if (true) return lnode;}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                             lnode=new ASTLiteral(); lnode.setStringValue(t.image);lnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);{if (true) return lnode;}
      break;
    case NUMERIC_LITERAL:
      t = jj_consume_token(NUMERIC_LITERAL);
                              lnode=new ASTLiteral(); lnode.setDecimalValue(t.image);lnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);{if (true) return lnode;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode memberExpression() throws ParseException {
        ASTNode head;
    /* this is a left recursion production
          primaryExpression()
        | functionExpression()
        | memberExpression() "[" expression() "]"
        | memberExpression() "." <IDENTIFIER>
        | "new" memberExpression() arguments()
        */
    
        head = _memberExpression_head();
    if (jj_2_1(2147483647)) {
      head = _memberExpression_tails(head);
    } else {
      ;
    }
     {if (true) return head;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode _memberExpression_head() throws ParseException {
     ASTNode node;
        ASTNode n1=null;
        String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      s = basicType();
                       node = new ASTIdentifier(s); {if (true) return node;}
      break;
    case FALSE:
    case NULL:
    case UNDEFINED:
    case THIS:
    case TRUE:
    case NUMERIC_LITERAL:
    case STRING_LITERAL:
    case DATE_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case SLASH:
      node = primaryExpression();
                                  {if (true) return node;}
      break;
    case FUNCTION:
      node = functionExpression();
                                   {if (true) return node;}
      break;
    case NEW:
      jj_consume_token(NEW);
      node = memberExpression();
      if (jj_2_2(2147483647)) {
        n1 = arguments();
      } else {
        ;
      }
                ASTNew newnode= new ASTNew();
                newnode.add(node,n1);
                {if (true) return newnode;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode _memberExpression_tail(ASTNode leftMember) throws ParseException {
      Token t; ASTNode n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      n = expression();
      jj_consume_token(RBRACKET);
                {if (true) return new ASTArrayMember(leftMember,n);}
      break;
    case DOT:
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
              {if (true) return new ASTMember(t,leftMember,t.image);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode _memberExpression_tails(ASTNode leftNode) throws ParseException {
     ASTNode node;
    node = _memberExpression_tail(leftNode);
    if (jj_2_3(2147483647)) {
      node = _memberExpression_tails(node);
             {if (true) return node;}
    } else {
      ;
    }
         {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode newExpression() throws ParseException {
     ASTNode node;
    /*  	   memberExpression()
            | "new" newExpression()
    */
    
            node = memberExpression();
                                 {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode callExpression() throws ParseException {
     ASTNode head;
    /* left recursion
            memberExpression() arguments()
            | callExpression()
                ( arguments()
                | "[" expression() "]"
                | "." <IDENTIFIER> )
        */
    
            head = _callExpression_head();
    if (jj_2_4(2147483647)) {
      head = _callExpression_tails(head);
    } else {
      ;
    }
         {if (true) return head;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode _callExpression_head() throws ParseException {
     ASTNode node;
        Token t;
    node = memberExpression();
                                  {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode _callExpression_tail(ASTNode leftMember) throws ParseException {
     Token t; ASTNode n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      n = arguments();
          {if (true) return new ASTCall(leftMember,(ASTArgumentList)n);}
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      n = expression();
      jj_consume_token(RBRACKET);
              {if (true) return new ASTArrayMember(leftMember,n);}
      break;
    case DOT:
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
              {if (true) return new ASTMember(t,leftMember,t.image);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode _callExpression_tails(ASTNode leftNode) throws ParseException {
     ASTNode node;
    node = _callExpression_tail(leftNode);
    if (jj_2_5(2147483647)) {
      node = _callExpression_tails(node);
                  {if (true) return node;}
    } else {
      ;
    }
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode arguments() throws ParseException {
     ASTNode node=null; Token t1, t2;
    t1 = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
    case FALSE:
    case FUNCTION:
    case NEW:
    case NULL:
    case UNDEFINED:
    case THIS:
    case TRUE:
    case TYPEOF:
    case VOID:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case NUMERIC_LITERAL:
    case STRING_LITERAL:
    case DATE_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case SLASH:
      node = argumentList();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    t2 = jj_consume_token(RPAREN);
          if (node != null)
            node.setSourcePos(
              t1.beginLine,
              t1.beginColumn,
              t2.endLine,
              t2.endColumn);
          {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode argumentList() throws ParseException {
     ASTArgumentList arglistnode= new ASTArgumentList();
     ASTNode node;
    node = assignmentExpression();
                                      arglistnode.add(node);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      node = assignmentExpression();
                                           arglistnode.add(node);
    }
            {if (true) return arglistnode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode leftHandSideExpression() throws ParseException {
     ASTNode node;
    /*    
    PHIL: Changed to allow expression like: 
          new java.lang.Long('5').longValue()
            LOOKAHEAD("new") node=newExpression() {return node;}
            |node=callExpression() {return node;}
    */
            node = callExpression();
                               {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode postfixExpression() throws ParseException {
     Token t;
        ASTNode leftNode;
    leftNode = leftHandSideExpression();
    if (jj_2_6(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        t = jj_consume_token(INCR);
        break;
      case DECR:
        t = jj_consume_token(DECR);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          ASTUnaryOp unaryNode=new ASTUnaryOp(t.image,true);
         unaryNode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
         unaryNode.add(leftNode);{if (true) return unaryNode;}
    } else {
      ;
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode unaryExpression() throws ParseException {
     ASTNode unarynode;
     ASTNode node;
     Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case FUNCTION:
    case NEW:
    case NULL:
    case UNDEFINED:
    case THIS:
    case TRUE:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case NUMERIC_LITERAL:
    case STRING_LITERAL:
    case DATE_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case SLASH:
      unarynode = postfixExpression();
                                         {if (true) return unarynode;}
      break;
    case DELETE:
      t = jj_consume_token(DELETE);
      node = unaryExpression();
                                            unarynode=new ASTUnaryOp("delete",t.beginLine, t.beginColumn, t.endLine, t.endColumn);unarynode.add(node);{if (true) return unarynode;}
      break;
    case VOID:
      t = jj_consume_token(VOID);
      node = unaryExpression();
                                            unarynode=new ASTUnaryOp("void",t.beginLine, t.beginColumn, t.endLine, t.endColumn);unarynode.add(node);{if (true) return unarynode;}
      break;
    case TYPEOF:
      t = jj_consume_token(TYPEOF);
      node = unaryExpression();
                                            unarynode=new ASTUnaryOp("typeof",t.beginLine, t.beginColumn, t.endLine, t.endColumn);unarynode.add(node);{if (true) return unarynode;}
      break;
    case INCR:
      t = jj_consume_token(INCR);
      node = unaryExpression();
                                            unarynode=new ASTUnaryOp("++",t.beginLine, t.beginColumn, t.endLine, t.endColumn);unarynode.add(node);{if (true) return unarynode;}
      break;
    case DECR:
      t = jj_consume_token(DECR);
      node = unaryExpression();
                                            unarynode=new ASTUnaryOp("--",t.beginLine, t.beginColumn, t.endLine, t.endColumn);unarynode.add(node);{if (true) return unarynode;}
      break;
    case PLUS:
      t = jj_consume_token(PLUS);
      node = unaryExpression();
                                            unarynode=new ASTUnaryOp("+",t.beginLine, t.beginColumn, t.endLine, t.endColumn);unarynode.add(node);{if (true) return unarynode;}
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      node = unaryExpression();
                                            unarynode=new ASTUnaryOp("-",t.beginLine, t.beginColumn, t.endLine, t.endColumn);unarynode.add(node);{if (true) return unarynode;}
      break;
    case TILDE:
      t = jj_consume_token(TILDE);
      node = unaryExpression();
                                            unarynode=new ASTUnaryOp("~",t.beginLine, t.beginColumn, t.endLine, t.endColumn);unarynode.add(node);{if (true) return unarynode;}
      break;
    case BANG:
      t = jj_consume_token(BANG);
      node = unaryExpression();
                                            unarynode=new ASTUnaryOp("!",t.beginLine, t.beginColumn, t.endLine, t.endColumn);unarynode.add(node);{if (true) return unarynode;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode multiplicativeExpression() throws ParseException {
     Token t;
     ASTNode leftNode;
     ASTNode rightNode;
    leftNode = unaryExpression();
    label_5:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        break;
      case REM:
        t = jj_consume_token(REM);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightNode = unaryExpression();
                leftNode=new ASTBinaryDefaultOp(t,leftNode,rightNode);
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode additiveExpression() throws ParseException {
     Token t = null;
        ASTNode leftNode;
        ASTNode rightNode;
    leftNode = multiplicativeExpression();
    label_6:
    while (true) {
      if (jj_2_8(2147483647)) {
        ;
      } else {
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        rightNode = multiplicativeExpression();
                   leftNode=new ASTBinaryAdd(leftNode,rightNode);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        rightNode = multiplicativeExpression();
                    leftNode=new ASTBinaryDefaultOp(t,leftNode,rightNode);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode shiftExpression() throws ParseException {
     Token t;
    ASTNode leftNode,rightNode;
    leftNode = additiveExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        t = jj_consume_token(LSHIFT);
        break;
      case RSIGNEDSHIFT:
        t = jj_consume_token(RSIGNEDSHIFT);
        break;
      case RUNSIGNEDSHIFT:
        t = jj_consume_token(RUNSIGNEDSHIFT);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightNode = additiveExpression();
                leftNode=new ASTBinaryDefaultOp(t,leftNode,rightNode);
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode relationalExpression() throws ParseException {
     Token t;
     ASTNode leftNode,rightNode;
    leftNode = shiftExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case INSTANCEOF:
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      case INSTANCEOF:
        t = jj_consume_token(INSTANCEOF);
        break;
      case IN:
        t = jj_consume_token(IN);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightNode = shiftExpression();
                leftNode=new ASTBinaryDefaultOp(t,leftNode,rightNode);
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode relationalExpressionNoIn() throws ParseException {
     Token t;
     ASTNode leftNode,rightNode;
    leftNode = shiftExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      case INSTANCEOF:
        t = jj_consume_token(INSTANCEOF);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightNode = shiftExpression();
                leftNode=new ASTBinaryDefaultOp(t,leftNode,rightNode);
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode equalityExpression() throws ParseException {
     Token t;
     ASTNode leftNode,rightNode;
    leftNode = relationalExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
      case 136:
      case 137:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      case 136:
        t = jj_consume_token(136);
        break;
      case 137:
        t = jj_consume_token(137);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightNode = relationalExpression();
                leftNode=new ASTBinaryDefaultOp(t,leftNode,rightNode);
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode equalityExpressionNoIn() throws ParseException {
     Token t;
     ASTNode leftNode,rightNode;
    leftNode = relationalExpressionNoIn();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
      case 136:
      case 137:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      case 136:
        t = jj_consume_token(136);
        break;
      case 137:
        t = jj_consume_token(137);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightNode = relationalExpressionNoIn();
                leftNode=new ASTBinaryDefaultOp(t,leftNode,rightNode);
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode bitwiseANDExpression() throws ParseException {
     Token t;
        ASTNode leftNode,rightNode;
    leftNode = equalityExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_12;
      }
      t = jj_consume_token(BIT_AND);
      rightNode = equalityExpression();
                leftNode=new ASTBinaryDefaultOp(t,leftNode,rightNode);
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode bitwiseANDExpressionNoIn() throws ParseException {
     Token t;
        ASTNode leftNode,rightNode;
    leftNode = equalityExpressionNoIn();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_13;
      }
      t = jj_consume_token(BIT_AND);
      rightNode = equalityExpressionNoIn();
                leftNode=new ASTBinaryDefaultOp(t,leftNode,rightNode);
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode bitwiseXORExpression() throws ParseException {
     Token t;
        ASTNode leftNode,rightNode;
    leftNode = bitwiseANDExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_14;
      }
      t = jj_consume_token(XOR);
      rightNode = bitwiseANDExpression();
                leftNode=new ASTBinaryDefaultOp(t,leftNode,rightNode);
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode bitwiseXORExpressionNoIn() throws ParseException {
     Token t;
        ASTNode leftNode,rightNode;
    leftNode = bitwiseANDExpressionNoIn();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_15;
      }
      t = jj_consume_token(XOR);
      rightNode = bitwiseANDExpressionNoIn();
                leftNode=new ASTBinaryDefaultOp(t,leftNode,rightNode);
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode bitwiseORExpression() throws ParseException {
     Token t;
        ASTNode leftNode,rightNode;
    leftNode = bitwiseXORExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_16;
      }
      t = jj_consume_token(BIT_OR);
      rightNode = bitwiseXORExpression();
                leftNode=new ASTBinaryDefaultOp(t,leftNode,rightNode);
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode bitwiseORExpressionNoIn() throws ParseException {
     Token t;
        ASTNode leftNode,rightNode;
    leftNode = bitwiseXORExpressionNoIn();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_17;
      }
      t = jj_consume_token(BIT_OR);
      rightNode = bitwiseXORExpressionNoIn();
                leftNode=new ASTBinaryDefaultOp(t,leftNode,rightNode);
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode logicalANDExpression() throws ParseException {
        ASTNode leftNode,rightNode;
    leftNode = bitwiseORExpression();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_18;
      }
      jj_consume_token(SC_AND);
      rightNode = bitwiseORExpression();
                ASTBinaryRelAnd binaryNode= new ASTBinaryRelAnd(leftNode,rightNode);
                leftNode=binaryNode;
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode logicalANDExpressionNoIn() throws ParseException {
        ASTNode leftNode,rightNode;
    leftNode = bitwiseORExpressionNoIn();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_19;
      }
      jj_consume_token(SC_AND);
      rightNode = bitwiseORExpressionNoIn();
                ASTBinaryRelAnd binaryNode= new ASTBinaryRelAnd(leftNode,rightNode);
                leftNode=binaryNode;
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode logicalORExpression() throws ParseException {
        ASTNode leftNode,rightNode;
    leftNode = logicalANDExpression();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_20;
      }
      jj_consume_token(SC_OR);
      rightNode = logicalANDExpression();
                ASTBinaryRelOr binaryNode= new ASTBinaryRelOr(leftNode,rightNode);
                leftNode=binaryNode;
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode logicalORExpressionNoIn() throws ParseException {
        ASTNode leftNode,rightNode;
    leftNode = logicalANDExpressionNoIn();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_21;
      }
      jj_consume_token(SC_OR);
      rightNode = logicalANDExpressionNoIn();
                ASTBinaryRelOr binaryNode= new ASTBinaryRelOr(leftNode,rightNode);
                leftNode=binaryNode;
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode conditionalExpression() throws ParseException {
          ASTNode falseNode;
          ASTNode trueNode;
          ASTNode conditionNode;
          Token t;
    conditionNode = logicalORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      t = jj_consume_token(HOOK);
      trueNode = assignmentExpression();
      jj_consume_token(COLON);
      falseNode = assignmentExpression();
          ASTTernaryOp ternaryNode= new ASTTernaryOp();
          ternaryNode.add(conditionNode,trueNode,falseNode);
          ternaryNode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
          {if (true) return ternaryNode;}
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
         {if (true) return conditionNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode conditionalExpressionNoIn() throws ParseException {
      ASTNode falseNode=null;
      ASTNode trueNode=null;
      ASTNode conditionNode=null;
      Token t;
    conditionNode = logicalORExpressionNoIn();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      t = jj_consume_token(HOOK);
      trueNode = assignmentExpressionNoIn();
      jj_consume_token(COLON);
      falseNode = assignmentExpressionNoIn();
          ASTTernaryOp ternaryNode= new ASTTernaryOp();
          ternaryNode.add(conditionNode,trueNode,falseNode);
          ternaryNode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
          {if (true) return ternaryNode;}
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
         {if (true) return conditionNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode assignmentExpression() throws ParseException {
     Token t;
     ASTNode leftNode;
     ASTNode rightNode;
    /*         conditionalExpression()
            |leftHandSideExpression() assignmentOperator() assignmentExpression()
    */
    /*
            LOOKAHEAD(leftHandSideExpression() assignmentOperator())
            leftNode=leftHandSideExpression()
            t=assignmentOperator()
            rightNode=assignmentExpression()
            {
              ASTAssign assignnode= new ASTAssign(t.image);
              assignnode.add(leftNode,rightNode);
              assignnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
              return assignnode;
            }
            |
            leftNode=conditionalExpression(){return leftNode;}
    */
    // PHIL: The best production is defined above but leads to a LOOKHEAD conflict, probably due
    // nested LOOKHEAD. It does not handle the following expression:
    //      v[f()] = 9
    // (do not accept a call statement f() within an array argument, while being the left part of an assignment)
    // The production bellow is not completly correct, as it tolerate statements like:
    //      2+6 = 9
    // but this is now checked at runtime
            leftNode = conditionalExpression();
    label_22:
    while (true) {
      if (jj_2_9(2147483647)) {
        ;
      } else {
        break label_22;
      }
      t = assignmentOperator();
      rightNode = assignmentExpression();
                ASTAssign assignnode= new ASTAssign(t.image);
                assignnode.add(leftNode,rightNode);
                assignnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                {if (true) return assignnode;}
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode assignmentExpressionNoIn() throws ParseException {
     Token t;
     ASTNode leftNode;
     ASTNode rightNode;
    /*        conditionalExpressionNoIn()
            | leftHandSideExpression() assignmentOperator() assignmentExpressionNoIn()
    */
    /*
            LOOKAHEAD(leftHandSideExpression() assignmentOperator())
            leftNode=leftHandSideExpression()
            t=assignmentOperator()
            rightNode=assignmentExpressionNoIn()
            {
              ASTAssign assignnode= new ASTAssign(t.image);
              assignnode.add(leftNode,rightNode);
              assignnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
              return assignnode;
            }
            |
            leftNode=conditionalExpressionNoIn(){ return leftNode;}
    */
    // PHIL: see comment defined for the previous production
            leftNode = conditionalExpressionNoIn();
    label_23:
    while (true) {
      if (jj_2_10(2147483647)) {
        ;
      } else {
        break label_23;
      }
      t = assignmentOperator();
      rightNode = assignmentExpressionNoIn();
                ASTAssign assignnode= new ASTAssign(t.image);
                assignnode.add(leftNode,rightNode);
                assignnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                {if (true) return assignnode;}
    }
         {if (true) return leftNode;}
    throw new Error("Missing return statement in function");
  }

  final public Token assignmentOperator() throws ParseException {
     Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      t = jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      t = jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      t = jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      t = jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      t = jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      t = jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      t = jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      t = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      t = jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      t = jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      t = jj_consume_token(ORASSIGN);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode expression() throws ParseException {
     ASTExpression exprNode=null;
     ASTNode n1;
     ASTNode n2;
     Token t;
    n1 = assignmentExpression();
    label_24:
    while (true) {
      if (jj_2_11(2147483647)) {
        ;
      } else {
        break label_24;
      }
      t = jj_consume_token(COMMA);
           // don't create  ASTExpression unless ',' exist
            if (exprNode==null){
              exprNode =new ASTExpression();
              exprNode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
              exprNode.add(n1);
            }
      n2 = assignmentExpression();
               exprNode.add(n2);
    }
             if (exprNode==null) {if (true) return n1;}
             {if (true) return exprNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode expressionNoIn() throws ParseException {
     ASTExpression exprNode=null;
      ASTNode n1;
      ASTNode n2;
      Token t;
    n1 = assignmentExpressionNoIn();
    label_25:
    while (true) {
      if (jj_2_12(2147483647)) {
        ;
      } else {
        break label_25;
      }
      t = jj_consume_token(COMMA);
           // don't create  ASTExpression unless ',' exist
            if (exprNode==null){
              exprNode =new ASTExpression();
              exprNode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
              exprNode.add(n1);
            }
      n2 = assignmentExpressionNoIn();
             exprNode.add(n2);
    }
         if (exprNode==null) {if (true) return n1;}
         {if (true) return exprNode;}
    throw new Error("Missing return statement in function");
  }

    // A.4 Statements
  final public ASTNode statement() throws ParseException {
     ASTNode node=null;
    try {
      if (jj_2_13(2147483647)) {
        node = block();
      } else if (jj_2_14(2147483647)) {
        node = labelledStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          node = variableStatement();
          break;
        case SEMICOLON:
          emptyStatement();
          break;
        default:
          jj_la1[40] = jj_gen;
          if (jj_2_15(1)) {
            node = expressionStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IF:
              node = ifStatement();
              break;
            case DO:
            case FOR:
            case WHILE:
              node = iterationStatement();
              break;
            case CONTINUE:
              node = continueStatement();
              break;
            case BREAK:
              node = breakStatement();
              break;
            case RETURN:
              node = returnStatement();
              break;
            case WITH:
              node = withStatement();
              break;
            case SWITCH:
              node = switchStatement();
              break;
            case THROW:
              node = throwStatement();
              break;
            case TRY:
              node = tryStatement();
              break;
            case SYNCHRONIZED:
              node = synchronizedStatement();
              break;
            case PROFILE:
              node = profileStatement();
              break;
            case IMPORT:
              node = importStatement();
              break;
            default:
              jj_la1[41] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
               {if (true) return node!=null ? ASTDebug.create(node) : null;}
    } catch (ParseException ex) {
             // If not in error recovery mode, rethrow the exception
             if(parsedScript==null) {
                 {if (true) throw ex;}
             }
             // Add the error to the list
             int line = ex.currentToken.next.beginLine;
             int col = ex.currentToken.next.beginColumn;
             parsedScript.addError(new ScriptError(ScriptError.ERROR,-1,ex.getMessage(),line,col));
             // Try to recover up-to the end of the statement
             _EndOfStatement(true);
             {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  void _EndOfStatement(boolean upto) throws ParseException {
            do {
                    // Get the next token
                        Token tok = getToken(1);
                        int kind = tok.kind;

                        // A semi colon is the normal end of statement
                        // This token is eaten and then ignored
                        if (kind == SEMICOLON) {
                                getNextToken();
                                return;
                        }

                        // => both EOF and { act as an EndOfStatement
                        if ((kind==EOF) || (kind==RBRACE)) {
                            return;
                        }

                        // EOL and SINGLE_LINE_COMMENT act as an EndOfStatement
                        if(tok.specialToken!=null) {
                                int specialKind = tok.specialToken.kind;
                                if((specialKind==EOL) || (specialKind==SINGLE_LINE_COMMENT)) {
                                    return;
                                }
                        // invalid special token => throw an error.
                        }

                        // Error, _EndOfStatement is invalid
                        // Recover if we want to reach the end
                        if(!upto) {
                                throw generateParseException();
                        }
                        getNextToken();
                } while(true);
  }

  final public ASTNode block() throws ParseException {
     ASTBlock blocknode=new ASTBlock();
     NodeVector nodes= new NodeVector();
     Token t;
    t = jj_consume_token(LBRACE);
         blocknode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
    if (jj_2_16(1)) {
      statementList(nodes);
           for(int i=0;i<nodes.size();i++){
            blocknode.add(nodes.get(i));
           }
    } else {
      ;
    }
    jj_consume_token(RBRACE);
          {if (true) return blocknode;}
    throw new Error("Missing return statement in function");
  }

  final public void statementList(NodeVector nodes) throws ParseException {
     ASTNode node;
    label_26:
    while (true) {
      node = statement();
            if (node!=null){
              nodes.add(node);
            }
      if (jj_2_17(1)) {
        ;
      } else {
        break label_26;
      }
    }
  }

  final public ASTNode variableStatement() throws ParseException {
     ASTVariableDecl vnode= new ASTVariableDecl();
    jj_consume_token(VAR);
    variableDeclarationList(vnode);
    _EndOfStatement(false);
         {if (true) return vnode;}
    throw new Error("Missing return statement in function");
  }

  final public void variableDeclarationList(ASTVariableDecl vnode) throws ParseException {
    variableDeclaration(vnode);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      variableDeclarationList(vnode);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
  }

  final public void variableDeclarationListNoIn(ASTVariableDecl vnode) throws ParseException {
    variableDeclarationNoIn(vnode);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      variableDeclarationListNoIn(vnode);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
  }

  final public void variableDeclaration(ASTVariableDecl vnode) throws ParseException {
     Token t; String s=null;
     ASTNode initnode=null;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      s = typeDeclaration();
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      initnode = initialiser();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
         String id=t.image;
         vnode.add(id,s,initnode);
         vnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }

  final public void variableDeclarationNoIn(ASTVariableDecl vnode) throws ParseException {
     Token t; String s=null;
     ASTNode initnode=null;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      s = typeDeclaration();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      initnode = initialiserNoIn();
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
             vnode.add(t.image,s,initnode);
             vnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }

  final public String typeDeclaration() throws ParseException {
     Token t; String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      s = basicType();
      break;
    case IDENTIFIER:
      s = className();
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String className() throws ParseException {
      Token t; String s;
    t = jj_consume_token(IDENTIFIER);
                       s=t.image;
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_27;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
                             s=s+"."+t.image;
    }
           {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String basicType() throws ParseException {
     Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      break;
    case BYTE:
      t = jj_consume_token(BYTE);
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case INT:
      t = jj_consume_token(INT);
      break;
    case LONG:
      t = jj_consume_token(LONG);
      break;
    case SHORT:
      t = jj_consume_token(SHORT);
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode initialiser() throws ParseException {
     ASTNode node;
    jj_consume_token(ASSIGN);
    node = assignmentExpression();
                                        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode initialiserNoIn() throws ParseException {
     ASTNode node;
    jj_consume_token(ASSIGN);
    node = assignmentExpressionNoIn();
                                              {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public void emptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  final public ASTNode expressionStatement() throws ParseException {
      ASTNode node;
    if (getToken(1).kind!=FUNCTION && getToken(1).kind!=LBRACE) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    node = expression();
    _EndOfStatement(false);
         {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode ifStatement() throws ParseException {
     ASTIf ifnode= new ASTIf();
     ASTNode n1=null;
     ASTNode n2=null;
     ASTNode n3=null;
     Token t;
    t = jj_consume_token(IF);
    jj_consume_token(LPAREN);
    n1 = expression();
    jj_consume_token(RPAREN);
    n2 = statement();
    if (jj_2_18(2147483647)) {
      jj_consume_token(ELSE);
      n3 = statement();
    } else {
      ;
    }
            ifnode.add(n1,n2,n3);
            ifnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
            {if (true) return ifnode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode iterationStatement() throws ParseException {
     ASTNode n1=null;
     ASTNode n2=null;
     Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      t = jj_consume_token(DO);
      n1 = statement();
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      n2 = expression();
      jj_consume_token(RPAREN);
      _EndOfStatement(false);
         ASTDoWhile dowhilenode= new ASTDoWhile();
         dowhilenode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
         dowhilenode.add(n1,n2);
         {if (true) return dowhilenode;}
      break;
    case WHILE:
      t = jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      n1 = expression();
      jj_consume_token(RPAREN);
      n2 = statement();
         ASTWhile whilenode= new ASTWhile();
         whilenode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
         whilenode.add(n1,n2);
         {if (true) return whilenode;}
      break;
    case FOR:
      n1 = _forStatement();
                             {if (true) return n1;}
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
    ASTNode _forAll():
    { ASTNode n1,n2,n3;
      ASTVariableDecl vNode= new ASTVariableDecl();
    }
    {
        "forall" "("
            (
                "var" variableDeclarationNoIn(vNode){n1=vNode;} "in" n2=expression()
            |
                n1=leftHandSideExpression() "in" n2=expression()
            )
        ")"
        n3=statement()
        {
            return new ASTForAll(n1,n2,n3);
        }
    }
*/
  final public ASTNode _forStatement() throws ParseException {
        Token t;
        ASTNode n;
    t = jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      n = _forVar(t);
      break;
    case DELETE:
    case FALSE:
    case FUNCTION:
    case NEW:
    case NULL:
    case UNDEFINED:
    case THIS:
    case TRUE:
    case TYPEOF:
    case VOID:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case NUMERIC_LITERAL:
    case STRING_LITERAL:
    case DATE_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case SEMICOLON:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case SLASH:
      n = _forNoVar(t);
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode _forNoVar(Token t) throws ParseException {
     ASTFor fornode= null;
     ASTForIn forinnode= null;
     ASTNode n1=null;
     ASTNode n2=null;
     ASTNode n3=null;
     ASTNode n4=null;
    if (jj_2_19(2147483647)) {
      n1 = leftHandSideExpression();
      jj_consume_token(IN);
      n2 = expression();
             forinnode= new ASTForIn();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case FALSE:
      case FUNCTION:
      case NEW:
      case NULL:
      case UNDEFINED:
      case THIS:
      case TRUE:
      case TYPEOF:
      case VOID:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case NUMERIC_LITERAL:
      case STRING_LITERAL:
      case DATE_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case SLASH:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case FALSE:
        case FUNCTION:
        case NEW:
        case NULL:
        case UNDEFINED:
        case THIS:
        case TRUE:
        case TYPEOF:
        case VOID:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case NUMERIC_LITERAL:
        case STRING_LITERAL:
        case DATE_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case SLASH:
          n1 = expressionNoIn();
          break;
        default:
          jj_la1[53] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case FALSE:
        case FUNCTION:
        case NEW:
        case NULL:
        case UNDEFINED:
        case THIS:
        case TRUE:
        case TYPEOF:
        case VOID:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case NUMERIC_LITERAL:
        case STRING_LITERAL:
        case DATE_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case SLASH:
          n2 = expression();
          break;
        default:
          jj_la1[54] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case FALSE:
        case FUNCTION:
        case NEW:
        case NULL:
        case UNDEFINED:
        case THIS:
        case TRUE:
        case TYPEOF:
        case VOID:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case NUMERIC_LITERAL:
        case STRING_LITERAL:
        case DATE_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case SLASH:
          n3 = expression();
          break;
        default:
          jj_la1[55] = jj_gen;
          ;
        }
             fornode= new ASTFor();
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
    n4 = statement();
            if (fornode!=null){
                  fornode.add(n1,n2,n3,n4);
                  fornode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                  {if (true) return fornode;}
            }else
            if (forinnode!=null){
                 forinnode.add(n1,n2,n4);
                 forinnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                 {if (true) return forinnode;}
            }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode _forVar(Token t) throws ParseException {
         ASTFor fornode = null;
         ASTForIn forinnode = null;
         ASTVariableDecl vNode= new ASTVariableDecl();
         ASTNode n2=null;
         ASTNode n3=null;
         ASTNode n4=null;
    variableDeclarationListNoIn(vNode);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
      jj_consume_token(IN);
             if(vNode.getEntryCount()>1)
               {{if (true) throw new ParseException("multiple declarations not allowed in for(..in..) statement");}}
      n2 = expression();
            forinnode=new ASTForIn();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case FALSE:
      case FUNCTION:
      case NEW:
      case NULL:
      case UNDEFINED:
      case THIS:
      case TRUE:
      case TYPEOF:
      case VOID:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case NUMERIC_LITERAL:
      case STRING_LITERAL:
      case DATE_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case SLASH:
        n2 = expression();
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case FALSE:
      case FUNCTION:
      case NEW:
      case NULL:
      case UNDEFINED:
      case THIS:
      case TRUE:
      case TYPEOF:
      case VOID:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case NUMERIC_LITERAL:
      case STRING_LITERAL:
      case DATE_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case SLASH:
        n3 = expression();
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
             fornode= new ASTFor();
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
    n4 = statement();
            if (fornode!=null){
              fornode.add(vNode,n2,n3,n4);
              fornode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
              {if (true) return fornode;}
            }else
            if (forinnode!=null){
                 forinnode.add(vNode,n2,n4);
                 forinnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
                 {if (true) return forinnode;}
            }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode continueStatement() throws ParseException {
     ASTContinue continuenode = new ASTContinue();
     Token t;
     Token t1=null;
    t = jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    _EndOfStatement(false);
         if (t1!=null){
            continuenode.setTargetLabel(t1.image);
         }
         continuenode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
         {if (true) return continuenode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode breakStatement() throws ParseException {
     ASTBreak breaknode = new ASTBreak();
     Token t;
     Token t1=null;
    t = jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    _EndOfStatement(false);
         if (t1!=null){
            breaknode.setTargetLabel(t1.image);
         }
         breaknode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
         {if (true) return breaknode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode returnStatement() throws ParseException {
     ASTReturn returnnode= new ASTReturn();
    ASTNode exprNode=null;
    Token t;
    t = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
    case FALSE:
    case FUNCTION:
    case NEW:
    case NULL:
    case UNDEFINED:
    case THIS:
    case TRUE:
    case TYPEOF:
    case VOID:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case NUMERIC_LITERAL:
    case STRING_LITERAL:
    case DATE_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case SLASH:
      exprNode = expression();
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    _EndOfStatement(false);
            returnnode.add(exprNode);
            returnnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
         {if (true) return returnnode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode withStatement() throws ParseException {
     ASTNode n1=null;
     ASTNode n2=null;
     Token t;
    t = jj_consume_token(WITH);
    jj_consume_token(LPAREN);
    n1 = expression();
    jj_consume_token(RPAREN);
    n2 = statement();
           ASTWith withnode= new ASTWith();
           withnode.add(n1,n2);
           withnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
           {if (true) return withnode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode switchStatement() throws ParseException {
     ASTSwitch switchNode= new ASTSwitch();
      ASTNode exprNode;
      NodeVector nodes= new NodeVector();
      Token t;
    t = jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    exprNode = expression();
    jj_consume_token(RPAREN);
    caseBlock(nodes);
         switchNode.addExpression(exprNode);
         switchNode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
         for(int i=0;i<nodes.getCount();i++){
            switchNode.addCase(nodes.get(i));
         }
            {if (true) return switchNode;}
    throw new Error("Missing return statement in function");
  }

  final public void caseBlock(NodeVector nodes) throws ParseException {
     ASTNode node;
    jj_consume_token(LBRACE);
    caseClauses(nodes);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _DEFAULT:
      node = defaultClause();
                                                     nodes.add(node);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    caseClauses(nodes);
    jj_consume_token(RBRACE);
  }

  final public void caseClauses(NodeVector nodes) throws ParseException {
     ASTNode node;
    label_28:
    while (true) {
      if (jj_2_20(2147483647)) {
        ;
      } else {
        break label_28;
      }
      node = caseClause();
                                             nodes.add(node);
    }
  }

  final public ASTNode caseClause() throws ParseException {
     ASTCase casenode= new ASTCase();
     NodeVector nodes= new NodeVector();
     ASTNode exprNode;
     Token t;
    t = jj_consume_token(CASE);
    exprNode = expression();
                                        casenode.setExpression(exprNode);
    jj_consume_token(COLON);
    if (jj_2_21(1)) {
      statementList(nodes);
    } else {
      ;
    }
            casenode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
            for(int i=0;i<nodes.getCount();i++){
                casenode.add(nodes.get(i));
            }
            {if (true) return casenode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode defaultClause() throws ParseException {
     ASTCase casenode= new ASTCase();
     NodeVector nodes= new NodeVector();
     Token t;
    t = jj_consume_token(_DEFAULT);
    jj_consume_token(COLON);
    if (jj_2_22(1)) {
      statementList(nodes);
    } else {
      ;
    }
            casenode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
            casenode.setDefault(true);
            for(int i=0;i<nodes.getCount();i++){
             casenode.add(nodes.get(i));
            }
            {if (true) return casenode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode labelledStatement() throws ParseException {
     ASTNode node;
     Token t=null;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    node = statement();
                if( node instanceof ILabelledStatement ) {
                        ((ILabelledStatement)node).setLabelName(t.image);
                }
                {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode tryStatement() throws ParseException {
     ASTNode n1;
     ASTTry tryNode= new ASTTry();
    jj_consume_token(TRY);
    n1 = block();
    _tryCatchFinally(tryNode);
         tryNode.addBlock(n1);
         {if (true) return tryNode;}
    throw new Error("Missing return statement in function");
  }

    // since catch & finally mainly consists of block , no need for
    // special ASTCatch & ASTFinally for them, ASTBlock will do the job.
  final public void _tryCatchFinally(ASTTry tryNode) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CATCH:
      catchProduction(tryNode);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        finallyProduction(tryNode);
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
      break;
    case FINALLY:
      finallyProduction(tryNode);
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ASTNode throwStatement() throws ParseException {
     ASTNode node;
    jj_consume_token(THROW);
    node = expression();
            ASTThrow throwNode=new ASTThrow();
            throwNode.add(node);
            {if (true) return throwNode;}
    throw new Error("Missing return statement in function");
  }

  final public void catchProduction(ASTTry tryNode) throws ParseException {
     Token t;
     ASTNode n1;
    jj_consume_token(CATCH);
    jj_consume_token(LPAREN);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(RPAREN);
    n1 = block();
         tryNode.addCatch(t.image,n1);
  }

  final public void finallyProduction(ASTTry tryNode) throws ParseException {
     ASTNode n1;
    jj_consume_token(FINALLY);
    n1 = block();
          tryNode.addFinally(n1);
  }

  final public ASTNode synchronizedStatement() throws ParseException {
        ASTSync syncNode=new ASTSync();
        ASTNode exprNode;
        ASTNode blockNode;
    jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
    exprNode = expression();
    jj_consume_token(RPAREN);
    blockNode = block();
            syncNode.addSyncExpr(exprNode);
            syncNode.addBlock(blockNode);
            {if (true) return syncNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode profileStatement() throws ParseException {
        String profilerType;
        ASTNode paramNode=null;
        ASTNode blockNode=null;
    jj_consume_token(PROFILE);
    jj_consume_token(LPAREN);
    profilerType = stringConstant();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      paramNode = expression();
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    blockNode = block();
            ASTProfile profileNode=new ASTProfile(profilerType,paramNode,blockNode);
            {if (true) return profileNode;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode importStatement() throws ParseException {
        ASTNode importNode=null;
        Token t;
    jj_consume_token(IMPORT);
    t = jj_consume_token(IDENTIFIER);
    _EndOfStatement(false);
            importNode=new ASTImport(t.image);
            //importNode=new ASTImport("mylib");
            importNode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
            {if (true) return importNode;}
    throw new Error("Missing return statement in function");
  }

    // A.5 Functions and Programs
  final public ASTNode functionDeclaration() throws ParseException {
     ASTFunction funcnode=new ASTFunction();
     NodeVector nodes= new NodeVector();
     Token t; String s=null; int mod=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case __RETLAST:
      mod = functionModifiers();
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
    jj_consume_token(FUNCTION);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      formalParameterList(funcnode);
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      s = typeDeclaration();
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
        funcnode.setModifiers(mod);
        funcnode.setName(t.image);
        funcnode.setReturnType(s);
        funcnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
    jj_consume_token(LBRACE);
    functionBody(nodes);
            for(int i=0;i<nodes.getCount();i++){
                funcnode.add(nodes.get(i));
            }
    jj_consume_token(RBRACE);
         {if (true) return funcnode;}
    throw new Error("Missing return statement in function");
  }

  final public int functionModifiers() throws ParseException {
        int mod=0;
        Token t;
    t = jj_consume_token(__RETLAST);
            mod |= FunctionObject.MOD_RETLAST;
                        {if (true) return mod;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode functionExpression() throws ParseException {
     ASTFunction funcnode=new ASTFunction();
     NodeVector nodes= new NodeVector();
     Token t = null;
     Token f;
     funcnode.setExpression(true);
    jj_consume_token(FUNCTION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      formalParameterList(funcnode);
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
          if (t != null) {
            funcnode.setName(t.image);
            funcnode.setSourcePos(t.beginLine, t.beginColumn, t.endLine, t.endColumn);
          }
    jj_consume_token(LBRACE);
    functionBody(nodes);
            for(int i=0;i<nodes.getCount();i++){
                funcnode.add(nodes.get(i));
            }
    jj_consume_token(RBRACE);
         {if (true) return funcnode;}
    throw new Error("Missing return statement in function");
  }

  final public void formalParameterList(ASTFunction funcNode) throws ParseException {
     Token t; String s=null;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      s = typeDeclaration();
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
            if(funcNode!=null ) {
                funcNode.addParameter(t.image,s);
            }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      formalParameterList(funcNode);
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
  }

  final public void functionBody(NodeVector nodes) throws ParseException {
    sourceElements(nodes);
  }

  final public ASTNode program() throws ParseException {
      ASTProgram prgnode= new ASTProgram();
      NodeVector nodes= new NodeVector();
            program1(prgnode,nodes);
            if (token.next!=null && token.next.image.trim().length()>0){
                {if (true) throw new ParseException("Unknown \""+token.next.image+"\" at line "+token.beginLine+", column "+token.beginColumn+".\n" );}
            }
          {if (true) return prgnode;}
    throw new Error("Missing return statement in function");
  }

  final public void program1(ASTProgram prgnode, NodeVector nodes) throws ParseException {
    sourceElements(nodes);
         for(int i=0;i<nodes.getCount();i++){
            prgnode.add(nodes.get(i));
         }
  }

  final public void sourceElements(NodeVector nodes) throws ParseException {
     ASTNode node;
    label_29:
    while (true) {
      if (jj_2_23(1)) {
        ;
      } else {
        break label_29;
      }
      node = sourceElement();
            nodes.add(node);
    }
  }

  final public ASTNode sourceElement() throws ParseException {
     ASTNode node;
    if (jj_2_24(1)) {
      node = statement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case __RETLAST:
        node = functionDeclaration();
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_3R_31()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_136()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_47() {
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(PROFILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_191()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind!=FUNCTION && getToken(1).kind!=LBRACE;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_47()) return true;
    if (jj_3R_48()) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_234()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_3R_239()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_241()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_233()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_64()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_211()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_97()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_177()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_3R_241()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_242()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_207()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_190() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    return false;
  }

  final private boolean jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_113()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_69()) return true;
    if (jj_3R_190()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_164()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_245()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_216()) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_3R_243()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_244()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_3R_223()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_186()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_84()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_194()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_116()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_186()) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_247()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_206()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_92()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_3R_245()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_246()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    if (jj_3_17()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(CASE)) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_214()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(NUMERIC_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_178()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_196()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    if (jj_3R_196()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_249()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_168()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_3R_247()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_248()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_3R_168()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_169()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_137()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_252() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) return true;
    }
    }
    }
    if (jj_3R_251()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_160()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_3R_249()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_250()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_193() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) return true;
    }
    }
    }
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_152()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_185()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_68()) return true;
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) jj_scanpos = xsp;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_3R_251()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_252()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    }
    }
    if (jj_3R_173()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) jj_scanpos = xsp;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_165()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_193()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_173()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_145()) return true;
    if (jj_3R_146()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_216()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) return true;
    }
    }
    if (jj_3R_179()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) return true;
    }
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_3R_173()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_253()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_226()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_3R_173()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_200()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_158()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_157()) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_234()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_235()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_3R_179()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_210()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) return true;
    }
    }
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_scan_token(REGEXP_BODY)) return true;
    if (jj_scan_token(REGEXP_END)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_3R_232()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_229()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_184()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_215()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_87()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(DATE_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_213()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_212()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(TYPEOF)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(VOID)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(FUNCTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_3R_31()) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_237()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_238()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_236() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(__RETLAST)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(NUMERIC_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(UNDEFINED)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_150()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_181()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_182()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  public FBScript2TokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[75];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x100000,0x60100000,0x60100000,0x70920000,0x0,0x0,0x0,0x0,0x70900000,0x0,0x0,0x70920000,0x0,0x0,0x70920000,0x0,0x0,0x0,0x0,0xa000000,0xa000000,0x8000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x81449000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x440000,0x70920000,0x70920000,0x70920000,0x70920000,0x70920000,0x70920000,0x70920000,0x2000000,0x0,0x0,0x70920000,0x10000,0x200000,0x204000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x8,0x8,0xa,0x288470aa,0x0,0x0,0x0,0x0,0x2884700a,0x0,0x0,0x288470aa,0x0,0x0,0x288470aa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x4000315,0x0,0x0,0x0,0x0,0x0,0x0,0x28847000,0x0,0x28847000,0x100,0x288470ea,0x288470aa,0x288470aa,0x288470aa,0x288470aa,0x288470aa,0x288470aa,0x0,0x0,0x0,0x288470aa,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x400,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x140800,0x15340800,0x15340808,0x80000000,0x240800,0x80000000,0x240800,0x15340808,0x10000000,0x11000000,0x15340808,0x80000000,0x0,0x15340808,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0xc0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x200008,0x0,0x8,0x0,0x55340808,0x15340808,0x15340808,0x15340808,0x55340808,0x15340808,0x15340808,0x40000000,0x200000,0x200000,0x15340808,0x0,0x0,0x0,0x80000000,0x0,0x200000,0x0,0x200000,0x200000,0x0,0x80000000,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x80000,0x80000,0xbc030,0x0,0x0,0x0,0x0,0x80000,0x1,0x1,0xbc030,0x0,0xc000,0xbc030,0x8c0000,0x30000,0x7000000,0x7000000,0x60c,0x60c,0x60c,0x60c,0x900,0x900,0x900,0x900,0x100000,0x100000,0x400000,0x400000,0x200000,0x200000,0x2000,0x2000,0x1000,0x1000,0x40,0x40,0xf8000002,0x0,0x0,0x0,0x0,0x80,0x2,0x80,0x2,0x0,0x1,0x0,0x0,0xbc030,0xbc030,0xbc030,0xbc030,0xbc030,0xbc030,0xbc030,0x0,0x0,0x0,0xbc030,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x80,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300,0x300,0x300,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[24];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public FBScript2(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new FBScript2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FBScript2(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new FBScript2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FBScript2(FBScript2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(FBScript2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 75; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[138];
    for (int i = 0; i < 138; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 75; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 138; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 24; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
