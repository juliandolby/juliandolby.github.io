/* Generated By:JavaCC: Do not edit this line. FBScript2TokenManager.java */
package com.ibm.jscript.parser;

public class FBScript2TokenManager implements FBScript2Constants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffffff000L) != 0L || (active1 & 0x7ffL) != 0L)
         {
            jjmatchedKind = 85;
            return 37;
         }
         if ((active1 & 0x100000000L) != 0L)
            return 96;
         if ((active0 & 0x40L) != 0L || (active1 & 0x4008000000000000L) != 0L)
            return 41;
         return -1;
      case 1:
         if ((active0 & 0xe7fbfffff0fbf000L) != 0L || (active1 & 0x7ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 1;
            }
            return 37;
         }
         if ((active0 & 0x180400000f040000L) != 0L)
            return 37;
         if ((active0 & 0x40L) != 0L)
            return 39;
         return -1;
      case 2:
         if ((active0 & 0x1800005010400000L) != 0L)
            return 37;
         if ((active0 & 0xe7ffffafecbbf000L) != 0L || (active1 & 0x7ffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 2;
            }
            return 37;
         }
         return -1;
      case 3:
         if ((active0 & 0xd6f79d25ccb3d000L) != 0L || (active1 & 0x7ffL) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
            return 37;
         }
         if ((active0 & 0x2108628a20082000L) != 0L)
            return 37;
         return -1;
      case 4:
         if ((active0 & 0xd6361c21cc838000L) != 0L || (active1 & 0x6d7L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 4;
            }
            return 37;
         }
         if ((active0 & 0xc1810400305000L) != 0L || (active1 & 0x128L) != 0L)
            return 37;
         return -1;
      case 5:
         if ((active0 & 0x4414002180020000L) != 0L || (active1 & 0x114L) != 0L)
            return 37;
         if ((active0 & 0x92221c004ca18000L) != 0L || (active1 & 0x6c3L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
            return 37;
         }
         return -1;
      case 6:
         if ((active0 & 0x12020c004c808000L) != 0L || (active1 & 0x6c2L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 6;
            return 37;
         }
         if ((active0 & 0x8020100000210000L) != 0L || (active1 & 0x1L) != 0L)
            return 37;
         return -1;
      case 7:
         if ((active0 & 0x1200040048000000L) != 0L || (active1 & 0x2c2L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 7;
            return 37;
         }
         if ((active0 & 0x2080004808000L) != 0L || (active1 & 0x400L) != 0L)
            return 37;
         return -1;
      case 8:
         if ((active0 & 0x200000008000000L) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
            return 37;
         }
         if ((active0 & 0x1000040040000000L) != 0L || (active1 & 0x282L) != 0L)
            return 37;
         return -1;
      case 9:
         if ((active0 & 0x200000008000000L) != 0L)
            return 37;
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 9;
            return 37;
         }
         return -1;
      case 10:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 10;
            return 37;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x200L);
      case 37:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4L);
      case 38:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000200000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 88);
      case 41:
         return jjStopAtPos(0, 89);
      case 42:
         jjmatchedKind = 114;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800400000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 95);
      case 45:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000800000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 96, 96);
      case 47:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x40L, 0x4000000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 103);
      case 59:
         return jjStopAtPos(0, 94);
      case 60:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100020000000000L, 0x8L);
      case 61:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x100L);
      case 62:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600040000000000L, 0x30L);
      case 63:
         return jjStopAtPos(0, 102);
      case 91:
         return jjStopAtPos(0, 92);
      case 93:
         return jjStopAtPos(0, 93);
      case 94:
         jjmatchedKind = 118;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x80L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x300000001000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1c0000000e000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x6000000070000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x38000000080000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xc0000000f00000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1e0000000f000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000000030000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x7L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x78L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x3e00000000L, 0x300L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x400L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x30000000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 90);
      case 124:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x1L);
      case 125:
         return jjStopAtPos(0, 91);
      case 126:
         return jjStopAtPos(0, 101);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 39);
         break;
      case 43:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      case 45:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      case 60:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 61:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         else if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x300L);
      case 62:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000000L, active2, 0x30L);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0x80L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000004000106000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000090030000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 37);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x410600000000L, active1, 0x108L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40020000200000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80800000080000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x180800004c000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2105108000408000L, active1, 0x400L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800001000L, active1, 0x203L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20800000L, active1, 0x24L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x202000000000L, active1, 0x40L, active2, 0L);
      case 124:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(2, 131);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(2, 132);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(2, 136);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(2, 137);
         break;
      case 62:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000000L, active1, 0x210L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x4L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4010000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x18300000000L, active1, 0x1L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20120000L, active1, 0x400L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2041000000a08000L, active1, 0x40L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80100000000000L, active1, 0xaL, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x610002000000000L, active1, 0xa0L, active2, 0L);
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x40400000000L, active1, 0x100L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80008082000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x5120220080004000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000800000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 37);
         break;
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(3, 133);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000211000L, active1, 0x400L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x804000L, active1, 0x40L, active2, 0L);
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 37);
         break;
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 37);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 37);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 37);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x1020042040020000L, active1, 0x20L, active2, 0L);
      case 103:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 37);
         break;
      case 104:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 37);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000004000000L, active1, 0L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x200110000000000L, active1, 0x4L, active2, 0L);
      case 109:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 37);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 111:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x410000400000000L, active1, 0x100L, active2, 0L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x88L, active2, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000100000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x80108008000L, active1, 0x12L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000080000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000008000000L, active1, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 37);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0x200100000000000L, active1, 0x2L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0x14L);
      case 107:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 37);
         break;
      case 108:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000200000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000004000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x80L);
      case 114:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0x1410080080000000L, active1, 0L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 37);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 37);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000820000L, active1, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000000L, active1, 0L);
      case 99:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 37);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 37);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 37);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 37);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 37);
         break;
      case 102:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 37);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0x80L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x8002000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 37);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x44800000L, active1, 0x600L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000210000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 37);
         return jjMoveStringLiteralDfa6_0(active0, 0x8008000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 115:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 37);
         break;
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 37);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 37);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000040000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80008000000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 37);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 37);
         return jjMoveStringLiteralDfa7_0(active0, 0x202000000000000L, active1, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L);
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 37);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0x40L);
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 37);
         break;
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 37);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0L);
      case 121:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 37);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 37);
         return jjMoveStringLiteralDfa8_0(active0, 0x48000000L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 37);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0x240L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 37);
         break;
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 37);
         break;
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 37);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 65, 37);
         break;
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 60, 37);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 71, 37);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 37);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 73, 37);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 37);
         break;
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 57, 37);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(11, 70, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 96;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAddStates(3, 5);
                  }
                  break;
               case 41:
                  if (curChar == 47)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(43);
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 19);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(50, 55);
                  else if (curChar == 47)
                     jjAddStates(20, 21);
                  else if (curChar == 36)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(34, 35);
                  else if (curChar == 39)
                     jjCheckNAddStates(22, 24);
                  else if (curChar == 34)
                     jjCheckNAddStates(25, 27);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAddStates(28, 31);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAddStates(32, 37);
                  }
                  break;
               case 0:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 4:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 5:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               case 6:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 41);
                  break;
               case 7:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 8:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 11:
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if (curChar == 39)
                     jjCheckNAddStates(22, 24);
                  break;
               case 18:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 20:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 21:
                  if (curChar == 39 && kind > 82)
                     kind = 82;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 45);
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 24:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 27:
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 33:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 34:
                  if ((0xffffff73ffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 35 && kind > 84)
                     kind = 84;
                  break;
               case 36:
                  if (curChar != 36)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if (curChar == 47)
                     jjAddStates(20, 21);
                  break;
               case 39:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 42:
                  if (curChar != 47)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddStates(28, 31);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(50, 55);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddStates(3, 5);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(0, 2);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 19);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 63:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 54);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(68, 54);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar != 46)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddStates(49, 51);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddStates(49, 51);
                  break;
               case 73:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(74, 54);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 76:
                  if (curChar != 46)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(52, 54);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(52, 54);
                  break;
               case 79:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(80);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(80, 59);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 83:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddTwoStates(84, 59);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(55, 57);
                  break;
               case 87:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(88);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 59);
                  break;
               case 89:
                  if (curChar != 48)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddStates(32, 37);
                  break;
               case 90:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(90, 46);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(92, 46);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(94, 48);
                  break;
               case 95:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(95, 48);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(37);
                  break;
               case 2:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 3:
                  if (curChar == 92)
                     jjAddStates(58, 62);
                  break;
               case 4:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 10:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 13:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(63, 67);
                  break;
               case 20:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 26:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 29:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjAddStates(68, 69);
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(37);
                  break;
               case 40:
                  if (kind > 5)
                     kind = 5;
                  break;
               case 43:
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if ((0x100000001000L & l) != 0L && kind > 75)
                     kind = 75;
                  break;
               case 48:
                  if ((0x100000001000L & l) != 0L && kind > 76)
                     kind = 76;
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 54:
                  if ((0x5000000050L & l) != 0L && kind > 75)
                     kind = 75;
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(72, 73);
                  break;
               case 59:
                  if ((0x5000000050L & l) != 0L && kind > 80)
                     kind = 80;
                  break;
               case 62:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(74, 75);
                  break;
               case 66:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(76, 77);
                  break;
               case 72:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(78, 79);
                  break;
               case 78:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(80, 81);
                  break;
               case 82:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 86:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(84, 85);
                  break;
               case 91:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(92);
                  break;
               case 92:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(92, 46);
                  break;
               case 93:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(94);
                  break;
               case 94:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(94, 48);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 37:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(37);
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(25, 27);
                  break;
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(22, 24);
                  break;
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(68, 69);
                  break;
               case 40:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 5)
                     kind = 5;
                  break;
               case 43:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 43;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 96 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x400L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x200L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(3, 0);
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                  {
                     if (kind > 134)
                        kind = 134;
                     jjCheckNAddTwoStates(0, 2);
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 135)
                        kind = 135;
                     jjCheckNAdd(4);
                  }
                  break;
               case 0:
                  if ((0xffff7fffffffdbffL & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAddTwoStates(0, 2);
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAddTwoStates(0, 2);
                  break;
               case 4:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAdd(4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAddTwoStates(0, 2);
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAddTwoStates(0, 2);
                  break;
               case 2:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAddTwoStates(0, 2);
                  break;
               case 4:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   55, 56, 59, 50, 51, 54, 61, 62, 54, 65, 66, 69, 70, 75, 76, 81, 
   82, 85, 86, 59, 41, 42, 18, 19, 21, 2, 3, 5, 45, 46, 47, 48, 
   90, 46, 91, 93, 95, 48, 2, 3, 7, 5, 18, 19, 23, 21, 61, 62, 
   54, 71, 72, 54, 77, 78, 59, 85, 86, 59, 4, 6, 8, 10, 13, 20, 
   22, 24, 26, 29, 34, 35, 52, 53, 57, 58, 63, 64, 67, 68, 73, 74, 
   79, 80, 83, 84, 87, 88, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\142\162\145\141\153", "\143\141\163\145", "\143\141\164\143\150", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\145\154\145\164\145", "\144\157", 
"\145\154\163\145", "\146\141\154\163\145", "\146\151\156\141\154\154\171", "\146\157\162", 
"\146\165\156\143\164\151\157\156", "\151\146", "\151\156", "\151\156\146\151\156\151\164\171", 
"\151\156\163\164\141\156\143\145\157\146", "\156\145\167", "\156\165\154\154", "\165\156\144\145\146\151\156\145\144", 
"\162\145\164\165\162\156", "\163\167\151\164\143\150", "\164\150\151\163", "\164\150\162\157\167", 
"\164\162\165\145", "\164\162\171", "\164\171\160\145\157\146", "\166\141\162", 
"\166\157\151\144", "\167\150\151\154\145", "\167\151\164\150", 
"\137\137\162\145\164\154\141\163\164", "\141\142\163\164\162\141\143\164", "\142\157\157\154\145\141\156", 
"\142\171\164\145", "\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\144\145\142\165\147\147\145\162", "\144\157\165\142\154\145", "\145\156\165\155", "\145\170\160\157\162\164", 
"\145\170\164\145\156\144\163", "\146\151\156\141\154", "\146\154\157\141\164", "\147\157\164\157", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", 
"\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", 
"\160\165\142\154\151\143", "\163\150\157\162\164", "\163\164\141\164\151\143", "\163\165\160\145\162", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\137\137\160\162\157\146\151\154\145", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\166\157\154\141\164\151\154\145", null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", 
"\73", "\54", "\56", "\75", "\76", "\74", "\41", "\176", "\77", "\72", "\75\75", 
"\74\75", "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", 
"\52", "\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", 
"\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", 
"\74\74\75", "\76\76\75", "\76\76\76\75", null, null, "\75\75\75", "\41\75\75", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_REGEXP", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 2, 3, 0, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff001L, 0xffffffffff351fffL, 0x3ffL, 
};
static final long[] jjtoSkip = {
   0x79eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x790L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x860L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[96];
private final int[] jjstateSet = new int[192];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public FBScript2TokenManager(JavaCharStream stream)
{
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public FBScript2TokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 96; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100001200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 7 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                               input_stream.backup(1);
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 5 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
